apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: openjdk18-web-basic-s2i-pipeline
  xpaas: 1.4.12
message: A new java application has been created in your project.
metadata:
  annotations:
    description: Levantar una app con sprinboot ejecutando con openjdk. este template va a crear el dc,bc y pipeline de jenkins. hay que pasarle el git y va a bajar el codigo fuente, compilar y subir el jar y hacer el deploy.
    iconClass: icon-rh-openjdk
    openshift.io/display-name: OpenJDK 8 - pipeline
    openshift.io/provider-display-name: Matiasgonzalocalvo@gmail.com
    tags: java
    template.openshift.io/documentation-url: https://github.com/matiasgonzalocalvo/devops_openshift
    template.openshift.io/long-description: OpenJDK Java 8 based application.
    template.openshift.io/support-url: https://github.com/matiasgonzalocalvo/devops_openshift
    version: 1.4.12
  creationTimestamp: null
  name: openjdk18-web-basic-s2i-pipeline
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The application's ${APPLICATION_NAME} http port.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    ports:
    - port: 8080
      targetPort: 8080
    selector:
      deploymentConfig: ${APPLICATION_NAME}
- apiVersion: v1
  id: ${APPLICATION_NAME}-http
  kind: Route
  metadata:
    annotations:
      description: Route for application's http service.
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    host: ${HOSTNAME_HTTP}
    to:
      name: ${APPLICATION_NAME}

- apiVersion: v1
  kind: RoleBinding
  metadata:
   name: jenkins
  roleRef:
   kind: Role
   name: edit
  subjects:
  - kind: ServiceAccount
    namespace: cicd
    name: jenkins

- apiVersion: v1
  kind: ImageStream
  metadata:
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    output:
      to:
        kind: ImageStreamTag
        name: ${APPLICATION_NAME}:latest
    source:
      type: Binary
    strategy:
      sourceStrategy:
        forcePull: true
        from:
          kind: ImageStreamTag
          name: redhat-openjdk18-openshift:1.3
          namespace: ${IMAGE_STREAM_NAMESPACE}
      type: Source
    triggers:
    - github:
        secret: ${GITHUB_WEBHOOK_SECRET}
      type: GitHub
    - generic:
        secret: ${GENERIC_WEBHOOK_SECRET}
      type: Generic
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      application: ${APPLICATION_NAME}
    name: ${APPLICATION_NAME}
  spec:
    replicas: 1
    selector:
      deploymentConfig: ${APPLICATION_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          application: ${APPLICATION_NAME}
          deploymentConfig: ${APPLICATION_NAME}
        name: ${APPLICATION_NAME}
      spec:
        containers:
        - env:
          - name: TZ
            value: ${TZ}
          image: ${APPLICATION_NAME}
          imagePullPolicy: Always
          name: ${APPLICATION_NAME}
          ports:
          - containerPort: 8778
            name: jolokia
            protocol: TCP
          - containerPort: 8080
            name: http
            protocol: TCP
          - containerPort: 8443
            name: https
            protocol: TCP
        terminationGracePeriodSeconds: 75
    triggers:
    - imageChangeParams:
        automatic: false
        containerNames:
        - ${APPLICATION_NAME}
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      type: ImageChange
    - type: ConfigChange
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "${APPLICATION_NAME}", "namespace": "", "kind": "DeploymentConfig"}]'
      template.alpha.openshift.io/wait-for-ready: "true"
    labels:
      name: ${APPLICATION_NAME}-pipeline
    name: ${APPLICATION_NAME}-pipeline
  spec:
    strategy:
      jenkinsPipelineStrategy:
        env:
          - name: http_proxy
            value: http_proxy=http://${PROXY_HOSTNAME}:${PROXY_PORT}
          - name: https_proxy
            value: https_proxy=https://${PROXY_HOSTNAME}:${PROXY_PORT}
          - name: no_proxy
            value: no_proxy=${NO_PROXY}
        jenkinsfile: |-
          try 
          {
            timeout(time: 20, unit: 'MINUTES') 
            {
              node('maven') 
              {
                //stage("probando")
                //{
                    //def feedback = input (
                    //message: 'prueba ?',
                    //submitterParameter: 'submitter',
                    //submitter: 'root-admin' 
                    //)
                  //echo "It was ${feedback} who submitted the dialog."
                  //def branchs = 'master\ndevelop'
                  //def branch = input(
                  //id: 'userInput', message: 'elegi branch?', parameters: [
                    //[$class: 'ChoiceParameterDefinition', choices: branch, description: 'elegir branch', name: 'choice-branch']
                  //]
                  //)
                  //echo "elegiste el branch ${branch}"
                //}
                stage("Checkout")
                {
                  //sh "export "
                  git url: "${SOURCE_REPOSITORY_URL}", branch: "${SOURCE_REPOSITORY_REF}"
                }
                stage("read version")
                {
                  pom = readMavenPom file: 'pom.xml'
                  version = pom.version
                }
                stage('build openjdk')
                {
                  //sh "ls -atlrh"
                  sh "mvn clean install -DskipTests -s settings.xml"
                }
                stage('Unit Test')
                {
                  //sh "ls -atlrh"
                  //sh "mvn test -s settings.xml"
                  echo "aca ejecutar test"
                }
                stage("Analicis de codigo sonar")
                {
                        echo "analicis con sonar"
                        //sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                }
                //stage('NEXUS')
                //{
                  //echo "nexus"
                  //sh "mvn deploy -DskipTests=true"
                //}
                stage("release")
                {
                  sh "mvn -B release:prepare -B -s settings.xml -DskipTests=true"
                  sh "mvn -B release:perform -B -s settings.xml -DskipTests=true"
                }
                stage('build Image')
                {
                  openshift.withCluster()
                  {
                    try 
                    {
                      openshift.withProject("${NAMESPACE}") 
                      {
                        echo "Using project: ${openshift.project()}"
                        //def bld = 
                        openshift.startBuild('${APPLICATION_NAME}',"--from-file=target/ROOT.jar", '--follow', "--wait=true")
                      }
                    }
                    catch ( e )
                    {
                      "Error encountered: ${e}"
                    }
                  }
                }
                //stage("probando aprobacion")
                //{
                  //input message: "deployo????. Approve?", id: "approval"
                  //def userInput = input(
                    //id: 'userInput', message: 'Let\'s promote?', parameters: [
                    //[$class: 'TextParameterDefinition', defaultValue: 'por que quiero', description: 'motivo 1 ', name: 'motivo1'],
                    //[$class: 'TextParameterDefinition', defaultValue: 'poe que otro quiere', description: 'motivo 2', name: 'motivo2']
                    //])
                    //echo ("Env: "+userInput['motivo1'])
                    //echo ("Target: "+userInput['motivo2'])
                //}
                stage('deploy')
                {
                  openshift.withCluster()
                  {
                    openshift.withProject("${NAMESPACE}")
                    {
                      def dc = openshift.selector('dc', '${APPLICATION_NAME}')
                      dc.rollout().latest()
                      sh "sleep 2"
                      dc.rollout().status()
                    }
                  }
                }
                stage('tag') 
                {
                  openshift.withCluster()
                  {
                    openshift.withProject("${NAMESPACE}")
                    {
                      echo "${pom}"
                      echo "${version}"
                      openshift.tag("${APPLICATION_NAME}:latest", "${APPLICATION_NAME}:${version}") 
                    }
                  }
                }
              }
            }
          }
          catch (err)
          {
            echo "in catch block"
            echo "Caught: ${err}"
            currentBuild.result = 'FAILURE'
            throw err
          }          
      type: JenkinsPipeline
    triggers:
    - github:
        secret: secret101
      type: GitHub
    - generic:
        secret: secret101
      type: Generic
parameters:

- description: NAMESPACE - PROJECTO
  displayName: PROJECTO DE LA APP
  name: NAMESPACE
  required: true

- description: The name for the application.
  displayName: Application Name
  name: APPLICATION_NAME
  required: true
  value: openjdk-app

- description: 'Custom hostname for http service route.  Leave blank for default hostname,
    e.g.: <application-name>-<project>.<default-domain-suffix>'
  displayName: Custom http Route Hostname
  name: HOSTNAME_HTTP

- description: Git source URI for application
  displayName: Git Repository URL
  name: SOURCE_REPOSITORY_URL
  required: true
  value: https://github.com/matiasgonzalocalvo/openjdk_template_openshift

- description: Git branch/tag reference
  displayName: Git Reference
  name: SOURCE_REPOSITORY_REF
  value: master

- description: Path within Git project to build; empty for root project directory.
  displayName: Context Directory
  name: CONTEXT_DIR
  value: 

- description: GitHub trigger secret
  displayName: Github Webhook Secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GITHUB_WEBHOOK_SECRET
  required: true

- description: Generic build trigger secret
  displayName: Generic Webhook Secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: GENERIC_WEBHOOK_SECRET
  required: true

- description: Namespace in which the ImageStreams for Red Hat Middleware images are
    installed. These ImageStreams are normally installed in the openshift namespace.
    You should only need to modify this if you've installed the ImageStreams in a
    different namespace/project.
  displayName: ImageStream Namespace
  name: IMAGE_STREAM_NAMESPACE
  required: true
  value: openshift

- description: Proxy Hostname
  displayName: Proxy Hostname
  name: PROXY_HOSTNAME
  required: false
  value: 10.245.146.29

- description: PROXY PORT
  displayName: PROXY PORT
  name: PROXY_PORT
  required: false
  value: "3128" 

- description: NO PROXY
  displayName: NO PROXY
  name: NO_PROXY
  required: false
  value: "0,1,2,3,4,5,6,7,8,9"

- description: TZ
  displayName: TZ
  name: TZ
  required: false
  value: "America/Argentina/Buenos_Aires"
